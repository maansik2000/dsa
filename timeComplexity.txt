                        AVERAGE TIME COMPLEXITY OF DATA STRUCTURE
------------------------------------------------------------------------------------------
Data structure      |   Access     |    Search     |    Insertion      |    Deletion    |
------------------------------------------------------------------------------------------
Array	            |   O(1)       |    O(N)       |    O(N)           |    O(N)        |
Stack	            |   O(N)	   |    O(N)	   |    O(1)	       |    O(1)        |
Queue	            |   O(N)	   |    O(N)	   |    O(1)	       |    O(1)        |
Singly Linked list	|   O(N)	   |    O(N)	   |    O(1)	       |    O(1)        |
Doubly Linked List	|   O(N)	   |    O(N)	   |    O(1)	       |    O(1)        |
Hash Table	        |   O(1)	   |    O(1)	   |    O(1)           |	O(1)        |
Binary Search Tree	|   O(log N)   |    O(log N)   |    O(log N)	   |    O(log N)    |
AVL Tree	        |   O(log N)   |    O(log N)   |    O(log N)	   |    O(log N)    |
Binary Tree	        |   O(log N)   |    O(log N)   |    O(log N)       |    O(log N)    |
Red Black Tree	    |   O(log N)   |    O(log N)   |    O(log N)	   |    O(log N)    |

------------------------------------------------------------------------------------------
                        WORST TIME COMPLEXITY OF DATA STRUCTURE
------------------------------------------------------------------------------------------
Data structure      |   Access     |    Search     |    Insertion      |    Deletion    |
------------------------------------------------------------------------------------------
Array	            |   O(1)       |    O(N)       |    O(N)           |    O(N)        |
Stack	            |   O(N)	   |    O(N)	   |    O(1)	       |    O(1)        |
Queue	            |   O(N)	   |    O(N)	   |    O(1)	       |    O(1)        |
Singly Linked list	|   O(N)	   |    O(N)	   |    O(1)	       |    O(1)        |
Doubly Linked List	|   O(N)	   |    O(N)	   |    O(1)	       |    O(1)        |
Hash Table	        |   O(n)	   |    O(n)	   |    O(n)           |	O(n)        |
Binary Search Tree	|   O(n)       |    O(n)       |    O(n)	       |    O(n)        |
AVL Tree	        |   O(log N)   |    O(log N)   |    O(log N)	   |    O(log N)    |
Binary Tree	        |   O(log N)   |    O(log N)   |    O(log N)	   |    O(log N)    |
Red Black Tree	    |   O(log N)   |    O(log N)   |    O(log N)	   |    O(log N)    |


------------------------------------------------------------------------------------------
                             TIME COMPLEXITY OF SORTING
------------------------------------------------------------------------------------------
Data structure      |   Best              |    Average           |    Worst         |
------------------------------------------------------------------------------------------
Quick Sort	        |   Ω(n log(n))       |    θ(n log(n))       |    O(N^2)        |
Merge Sort	        |   Ω(n log(n))	      |    θ(n log(n))       |    o(n log(n))	|
Heap Sort	        |   Ω(n log(n))	      |    θ(n log(n))	     |    O(n log(n))   |
Bubble Sort	        |   Ω(n)	          |    θ(n^2)	         |    O(n^2)	    |
Insertion Sort	    |   Ω(n)	          |    θ(n^2)	         |    O(n^2)	    |
Selection Sort	    |   Ω(n^2)	          |    θ(n^2)	         |    O(n^2)	    |
Tree Sort	        |   Ω(n log(n))	      |    Θ(n log(n))	     |    O(n^2)        |
Counting Sort	    |   Ω(n+k)            |    Θ(n+k)            |    O(n+k)	    |


------------------------------------------------------------------------------------------
                             TIME COMPLEXITY OF SEARCHING
------------------------------------------------------------------------------------------
Data structure          |   Average             |    Worst             |    space         |
------------------------------------------------------------------------------------------
DFS	                    |  -                    |    θ(|E| + |V|)      |    O(V)          |
BFS	                    |  -                    |    θ(|E| + |V|)      |    O(V)          |
Binary Search	        |   Ω(log(n))	        |    θ(log(n))	       |    O(1)          |
Linear Search	        |   Ω(n)	            |    θ(n)	           |    O(1)	      |
Dijkstra Algo using heap|   Ω((V+E) log|V|)	    |    Ω((V+E) log|V|)   |    O(V)	      |
Dijkstra using array    |   Ω(V^2) and O(ElogV) |    θ(V^2)	           |    O(V)	      |
BelmanFord	            |   Ω(VE)	            |    Θ(VE)	           |    O(V)          |
Krukskal algo	        |   Ω(ElogV)            |    Θ(ElogV)          |    	          |
Prims Algo	            |   Ω(ElogV)            |    Θ(V*V)            |    	          |
Floyd algo	            |   Ω(V^3)              |    Θ(V^3)            |    	          |


------------------------------------------------------------------------------------------
                             TIME COMPLEXITY OF HEAP
------------------------------------------------------------------------------------------
Data structure      |   Heapify     |    FindMax    |    ExtractMax     |     Insert    |    Delete    | merge       |
-----------------------------------------------------------------------------------------------------------------------
Linked List Sorted	|  -            |    O(1)       |    O(1)           |      O(n)     | O(1)         |O(n+m)       |
linked list unsorted|  -            |    o(n)       |    O(n)           |      O(1)     | O(1)         |O(1)         |
binary Heap	        |   O(N)        |    o(logn)    |    O(logn)        |      O(logn)  | O(logn)      |O(n+m)       |
Bionomial Heap	    |   -	        |    o(logn)    |    O(logn)        |      O(logn)  | O(logn)      |O(logn)      |
Fibonacci HEAP      |   -	        |    o(1)       |    O(logn)        |      O(1)     |O(logn)       |O(1)         |
